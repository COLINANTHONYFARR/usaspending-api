#[build-system]
# Using this .toml file in accordance with emerging support for PEP 517 and PEP 518 which aims to get away from setup.py
# and allow static (text config file) declaration of package setup.
#
# See also: https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/
#
# See further comments on use of pyproject.toml and necessity of setup.py in the setup.py module
#
# NOTE: PEP 621 (https://www.python.org/dev/peps/pep-0621/#example) does not seem to have support from
# the setuptools backend yet. setuptools opted for putting static build config in setup.cfg instead of adding support
# for parsing and processing pyproject.toml
#
# However their setup.cfg spec/support doesn't support declarative syntax for and parsing of an install_requires
# section, which would mean duplicating all the declared project required libraries inline rather than referring to a
# requirements.txt file
#
# So: As it stands, this is here
#requires = ["pip>=21.3.1", "setuptools>=60.5.0", "wheel"]
#build-backend = "setuptools.build_meta"

[build-system]
requires = ["pip", "setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "usaspending-api"
#version = "0.0.0"
description = """This API is utilized by USAspending.gov to obtain all federal spending data which is open source
and provided to the public as part of the DATA Act."""
readme = "README.md"
#license = {text = "BSD 3-Clause License"}
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3 :: Only",
]
#dependencies = [
#    "requests",
#    'importlib-metadata; python_version<"3.8"',
#]
#dependencies = {file = "requirements/requirements-app.txt"}
#[project.optional-dependencies]
#dev = {file = "requirements/requirements-dev.txt"}
#pdf = ["ReportLab>=1.2", "RXP"]
#rest = ["docutils>=0.3", "pack ==1.1, ==1.3"]
# From: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#dynamic
# "Specifies which fields listed by this PEP were intentionally unspecified so another tool can/will provide such metadata dynamically."
dynamic = ["version", "dependencies", "optional-dependencies"]

[tool.setuptools.packages.find]
where = ["usaspending_api"]  # list of folders that contain the packages (["."] by default)

[tool.black]
line-length = 120
target_version = ['py37']
exclude = '/(\.git|\.venv|venv|migrations)/'
