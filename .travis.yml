language: python

#cache: pip

cache:
  pip: true
  directories:
    - docker_images

python:
  - '3.7'

#services:
#  - postgresql
  # NOTE: This is added, but re-installed at a different version below
#  - elasticsearch

#addons:
#  postgresql: '10'
#  apt:
#    packages:
#    - postgresql-10
#    - postgresql-client-10

env:
  global:
    # For usaspending-db container
    - POSTGRES_HOST=localhost  # able to use localhost when network_mode=host (in docker-compose.yaml)
    - POSTGRES_PORT=5432
    - POSTGRES_USER=usaspending
    - POSTGRES_PASSWORD=usaspender
    - POSTGRES_DB=data_store_api
    # For usaspending-ci container
    - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    - ES_HOST=localhost  # able to use localhost when network_mode=host (in docker-compose.yaml)
    - ES_PORT=9200
    - ES_HOSTNAME=${ES_HOST}:${ES_PORT}
    - BROKER_HOST=localhost  # broker container not on docker-compose network, so must connect out to localhost. Both the spun-up broker db init container, and our our test container will run with network_mode=host in order to resolve localhost
    - BROKER_PORT=5432  # and it shares the same PG server as usaspending DB, but different test db created
    - BROKER_USER=admin
    - BROKER_PASSWORD=root
    - BROKER_DB_NAME=data_broker
    - DATA_BROKER_DATABASE_URL=postgresql://${BROKER_USER}:${BROKER_PASSWORD}@${BROKER_HOST}:${BROKER_PORT}/${BROKER_DB_NAME}
    # Location in host machine where broker src code root can be found
    - DATA_BROKER_SRC_PATH="${TRAVIS_BUILD_DIR}/../data-act-broker-backend"
    # OLD
    #  - USASPENDING_DB_HOST=localhost
    #  - USASPENDING_DB_PORT=5432
    #  - USASPENDING_DB_USER=usaspending
    #  - USASPENDING_DB_PASSWORD=usaspender
    #  - USASPENDING_DB_NAME=data_store_api
    #- DATABASE_URL=postgres://${USASPENDING_DB_USER}:${USASPENDING_DB_PASSWORD}@${USASPENDING_DB_HOST}:${USASPENDING_DB_PORT}/${USASPENDING_DB_NAME}
    - DJANGO_SETTINGS_MODULE='usaspending_api.settings'
    #  - ES_HOSTNAME='http://localhost:9200'
    #  - BROKER_DB_HOST=localhost
    #  - BROKER_DB_PORT=5432
    #  - BROKER_DB_USER=admin
    #  - BROKER_DB_PASSWORD=root
    #  - BROKER_DB_NAME=data_broker
    #- DATA_BROKER_DATABASE_URL=postgres://${BROKER_DB_USER}:${BROKER_DB_PASSWORD}@${BROKER_DB_HOST}:${BROKER_DB_PORT}/${BROKER_DB_NAME}
    - BROKER_REPO_URL=https://github.com/fedspendingtransparency/data-act-broker-backend.git
    - BROKER_REPO_BRANCH=$(if [ "${TRAVIS_EVENT_TYPE}" = "pull_request" ] && [ ! -z "`git ls-remote --heads ${BROKER_REPO_URL} ${TRAVIS_BRANCH}`" ]; then echo "${TRAVIS_BRANCH}"; else echo "development"; fi;)
    - BROKER_REPO_FOLDER=${DATA_BROKER_SRC_PATH}
    - BROKER_DOCKER_IMAGE=dataact-broker-backend
    - GRANTS_API_KEY=${GRANTS_API_KEY}

before_install:
  # Re-install elasticsearch at the right version
  #  - sudo systemctl stop elasticsearch
  #  - sudo dpkg --remove elasticsearch
  #  - sudo dpkg --purge elasticsearch
  #  - sudo rm -rf /var/lib/elasticsearch
  #  - travis_retry curl -s -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.1.1-amd64.deb
  #  - sudo dpkg --install elasticsearch-7.1.1-amd64.deb
  #  - sudo sed -i.old 's/-Xms1g/-Xms512m/' /etc/elasticsearch/jvm.options
  #  - echo -e '-XX:+DisableExplicitGC\n-Djdk.io.permissionsUseCanonicalPath=true\n-Dlog4j.skipJansi=true\n-server\n' | sudo tee -a /etc/elasticsearch/jvm.options
  #  - sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install mapper-murmur3
  #  - sudo chown -R elasticsearch:elasticsearch /etc/default/elasticsearch
  #  - sudo systemctl start elasticsearch
  #  - sudo journalctl -u elasticsearch -b
  # Reload any cached images and their layers from previous builds, to shorten docker pulls/builds
  -  docker load -i docker_images/images.tar || true
  # Add dredd for API contract testing
  - travis_retry npm install --global dredd@13.1.2

install:
  - travis_retry pip install -r requirements/requirements.txt
  - travis_retry pip install coveralls
  # Checkout dependent broker code used to spin up a broker integration test db. Put it in its own folder alongside this repo's code
  - echo "Using ${BROKER_REPO_BRANCH} branch from ${BROKER_REPO_URL}"
  - travis_retry git clone --branch ${BROKER_REPO_BRANCH} --single-branch --depth 1 ${BROKER_REPO_URL} ${BROKER_REPO_FOLDER}

before_script:
  # Get dependencies to report code coverage to code climate
  - travis_retry curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build
  # Our Postgres DB provided by Travis needs to have the (super) users specified by our env var DB URLs used
  #  - psql -c "CREATE USER ${USASPENDING_DB_USER} PASSWORD '${USASPENDING_DB_PASSWORD}' SUPERUSER"
  #  - psql -c "CREATE USER ${BROKER_DB_USER} PASSWORD '${BROKER_DB_PASSWORD}' SUPERUSER"
  - docker build -t ${BROKER_DOCKER_IMAGE} ${BROKER_REPO_FOLDER}  # Build image from which to call Broker scripts
  - docker-compose build usaspending-ci
  - docker-compose up -d usaspending-db usaspending-es
  - sleep 15
  - docker-compose logs
  - ttl=30; echo "Try DB conn from container for $ttl seconds"; until [ $ttl -le 0 ] || docker-compose run --rm usaspending-ci psql $DATABASE_URL -c 'select 1 where 1=1'; do echo $ttl; ((ttl--)); sleep 1; done; [ $ttl -gt 0 ]
  - ttl=30; echo "Try ES conn from container for $ttl seconds"; until [ $ttl -le 0 ] || docker-compose run --rm usaspending-ci curl --silent -XGET --fail $ES_HOSTNAME; do echo $ttl; ((ttl--)); sleep 1; done; [ $ttl -gt 0 ]
  # Broker integration tests use the same PG server, but need a broker user created
  - psql postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/postgres -c "CREATE USER ${BROKER_USER} PASSWORD '${BROKER_PASSWORD}' SUPERUSER"


script:
  - cd ${TRAVIS_BUILD_DIR}  # run build script out of repo dir
  - dredd > dredd-results.txt && echo '! grep -E "^[warn:|error:]" dredd-results.txt' | bash
  # See docker-compose.yaml. Runs black, flake8, endpoint doc check, unit tests, integration tests
  - docker-compose run --rm usaspending-ci

before_cache:
  # Save off docker images+layers used by this build into the `docker_images` cache dir
  - docker save -o docker_images/images.tar $(docker images -a -q)

after_script:
  - docker-compose down
  - ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT
